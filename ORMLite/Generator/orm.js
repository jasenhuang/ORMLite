/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,8],$V3=[2,10],$V4=[1,11],$V5=[6,29,31,32,35],$V6=[1,21],$V7=[1,22],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,37],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,42],$Vk=[6,10,29,31,32,35],$Vl=[21,23],$Vm=[16,64],$Vn=[1,48],$Vo=[16,58,64],$Vp=[16,52,53,54,55,56,58,64],$Vq=[1,58],$Vr=[1,74],$Vs=[1,76],$Vt=[19,37],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,91],$Vz=[1,93],$VA=[16,37],$VB=[16,63,64],$VC=[23,64];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"stmts":4,"stmt":5,"@":6,"interface":7,"name":8,"block":9,":":10,"inherite":11,"properties":12,"end":13,"category":14,"(":15,")":16,"<":17,"names":18,">":19,"{":20,"}":21,"variables":22,";":23,"variable":24,"propertyitem":25,"property":26,"decorators":27,"functionItem":28,"database":29,"sentence":30,"table":31,"-":32,"type":33,"params":34,"+":35,"param":36,",":37,"decorator":38,"setter":39,"=":40,"getter":41,"datafield":42,"primary":43,"typename":44,"pointers":45,"typedecorator":46,"basetype":47,"enum":48,"const":49,"signed":50,"unsigned":51,"int":52,"float":53,"char":54,"double":55,"long":56,"pointer":57,"*":58,"\"":59,"invoke":60,"[":61,"]":62,".":63,"TIDENTIFIER":64,"numeric":65,"TINTEGER":66,"$accept":0,"$end":1},
terminals_: {2:"error",6:"@",7:"interface",10:":",13:"end",15:"(",16:")",17:"<",19:">",20:"{",21:"}",23:";",26:"property",29:"database",31:"table",32:"-",35:"+",37:",",39:"setter",40:"=",41:"getter",42:"datafield",43:"primary",48:"enum",49:"const",50:"signed",51:"unsigned",52:"int",53:"float",54:"char",55:"double",56:"long",58:"*",59:"\"",61:"[",62:"]",63:".",64:"TIDENTIFIER",66:"TINTEGER"},
productions_: [0,[3,0],[3,1],[4,2],[4,1],[5,9],[5,8],[14,3],[11,4],[11,1],[9,0],[9,2],[9,3],[22,3],[22,1],[12,2],[12,1],[25,7],[25,2],[25,4],[25,4],[28,5],[28,5],[34,2],[34,1],[36,6],[36,1],[27,3],[27,1],[38,3],[38,3],[38,1],[38,1],[38,1],[18,3],[18,1],[24,2],[33,2],[33,1],[44,2],[44,1],[44,2],[44,2],[44,1],[44,1],[46,1],[46,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,2],[45,2],[45,1],[57,1],[57,2],[30,1],[30,4],[30,1],[60,4],[60,3],[60,4],[60,3],[8,1],[65,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
global.models = $$[$0];
break;
case 3:

		$$[$0-1].statements.push($$[$0]);
	
break;
case 4:

		this.$ = new Statements();
		this.$.statements.push($$[$0]);
	
break;
case 5:

		this.$ = new ClassDeclaration();
		this.$.name = $$[$0-6];
		this.$.block = $$[$0-5];
		this.$.inherite = $$[$0-3];
		this.$.properties = $$[$0-2];
	
break;
case 6:

		this.$ = new ClassDeclaration();
		this.$.name = $$[$0-5];
		this.$.category = $$[$0-4];
		this.$.block = $$[$0-3];
		this.$.properties = $$[$0-2];
	
break;
case 7:
 this.$ = $$[$0-1]; 
break;
case 8:

		this.$ = new InheriteDeclaration()
		this.$.name = $$[$0-3];
		this.$.protocols = $$[$0-1];
	
break;
case 9:

		this.$ = new InheriteDeclaration()
		this.$.name = $$[$0];
		this.$.protocols = new Array();
	
break;
case 11:

		this.$ = new BlockDeclaration();
	
break;
case 12:

		this.$ = new BlockDeclaration();
		this.$.variables = $$[$0-1];
	
break;
case 13: case 27:

		$$[$0-2].push($$[$0]);
	
break;
case 14: case 35:

		this.$ = new Array();
		this.$.push($$[$0]);
	
break;
case 15: case 23:

		$$[$0-1].push($$[$0]);
	
break;
case 16: case 28:

		this.$ = new Array(); this.$.push($$[$0]);
	
break;
case 17:

		this.$ = new PropertyDeclaration();
		this.$.variable = $$[$0-1];
		this.$.decorators = $$[$0-3];
	
break;
case 18:

		this.$ = $$[$0-1];
	
break;
case 19:

		this.$ = new DatabaseDeclaration();
		this.$.type = 'database';
		this.$.name = $$[$0-1];
	
break;
case 20:

		this.$ = new TableDeclaration();
		this.$.type = 'table';
		this.$.name = $$[$0-1];
	
break;
case 21:

		this.$ = new FunctionDeclaration();
		this.$.name = 'instance function'
		this.$.params = $$[$0];
	
break;
case 22:

		this.$ = new FunctionDeclaration();	
		this.$.name = 'class function'
		this.$.params = $$[$0];
	
break;
case 24:

		this.$ = new Array(); 
		this.$.push($$[$0]);
	
break;
case 25:

		this.$ = new FunctionParameter();
		this.$.prefix = $$[$0-5];
		this.$.type = $$[$0-2];
		this.$.name = $$[$0];
	
break;
case 26:

		this.$ = new FunctionParameter();
		this.$.prefix = $$[$0];
	
break;
case 29:
this.$ = new DecoratorDeclaration();this.$.setter = $$[$0-2];
break;
case 30:
this.$ = new DecoratorDeclaration();this.$.getter = $$[$0-2];
break;
case 31: case 32: case 33:
this.$ = new DecoratorDeclaration();this.$.name = $$[$0];
break;
case 34:
 
		$$[$0-2].push($$[$0]); 
	
break;
case 36:

		this.$ = new VarDeclaration();
		this.$.type = $$[$0-1];
		this.$.name = $$[$0];
	
break;
case 37:

		this.$ = new TypeDeclaration();
		this.$.name = $$[$0-1];
		this.$.pointers = $$[$0];
	
break;
case 38:

		this.$ = new TypeDeclaration();
		this.$.name = $$[$0];
	
break;
case 39: case 41: case 42: case 52:
this.$ = $$[$0-1] + ' ' + $$[$0];
break;
case 40: case 43:
 this.$ = $$[$0];
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 57: case 59:
this.$ = $$[$0];
break;
case 53:
$$[$0-1].push($$[$0]);
break;
case 54:
this.$ = new Array();this.$.push($$[$0]);
break;
case 55:
this.$ = new PointerDeclaration();this.$.is_const = false;
break;
case 56:
this.$ = new PointerDeclaration();this.$.is_const = true;
break;
case 58:
this.$ = '@"' + $$[$0-1] + '"';
break;
case 60: case 62:
 this.$ = $$[$0-3] + $$[$0-2] + ' ' + $$[$0-1] + $$[$0];
break;
case 61: case 63:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 64:
 this.$ = yytext;
break;
case 65:
/**/
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,6:$V0},{1:[3]},{1:[2,2],5:5,6:$V0},o($V1,[2,4]),{7:$V1},o($V1,[2,3]),{8:7,64:$V2},{9:9,10:$V3,14:10,15:[1,12],20:$V4},o([6,10,15,16,17,19,20,21,23,29,31,32,35,37,58,59,62,63,64],[2,64]),{10:[1,13]},o($V5,$V3,{9:14,20:$V4}),{8:24,21:[1,15],22:16,24:17,33:18,44:19,46:20,47:23,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve,64:$V2},{8:32,64:$V2},{8:34,11:33,64:$V2},{6:$Vf,12:35,25:36,28:38,29:$Vg,31:$Vh,32:$Vi,35:$Vj},o($Vk,[2,11]),{21:[1,43],23:[1,44]},o($Vl,[2,14]),{8:45,64:$V2},o($Vm,[2,38],{45:46,57:47,58:$Vn}),o($Vo,[2,40],{47:49,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve}),{8:50,64:$V2},{47:51,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},o($Vo,[2,43]),o($Vo,[2,44]),o($Vp,[2,45]),o($Vp,[2,46]),o($Vo,[2,47]),o($Vo,[2,48]),o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51],{56:[1,52]}),{16:[1,53]},{6:$Vf,12:54,25:36,28:38,29:$Vg,31:$Vh,32:$Vi,35:$Vj},o($V5,[2,9],{17:[1,55]}),{6:[1,56],25:57,28:38,29:$Vg,31:$Vh,32:$Vi,35:$Vj},o($V5,[2,16]),{26:$Vq},{23:[1,59]},{15:[1,60]},{15:[1,61]},{15:[1,62]},{15:[1,63]},o($Vk,[2,12]),{8:24,24:64,33:18,44:19,46:20,47:23,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve,64:$V2},o($Vl,[2,36]),o($Vm,[2,37],{57:65,58:$Vn}),o($Vo,[2,54]),o($Vo,[2,55],{49:[1,66]}),o($Vo,[2,39]),o($Vo,[2,41]),o($Vo,[2,42]),o($Vo,[2,52]),o([6,20,29,31,32,35],[2,7]),{6:[1,67],25:57,28:38,29:$Vg,31:$Vh,32:$Vi,35:$Vj},{8:69,18:68,64:$V2},{13:[1,70],26:$Vq},o($V5,[2,15]),{15:[1,71]},o($V5,[2,18]),{6:$Vr,8:73,30:72,60:75,61:$Vs,64:$V2},{6:$Vr,8:73,30:77,60:75,61:$Vs,64:$V2},{8:24,33:78,44:19,46:20,47:23,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve,64:$V2},{8:24,33:79,44:19,46:20,47:23,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve,64:$V2},o($Vl,[2,13]),o($Vo,[2,53]),o($Vo,[2,56]),{13:[1,80],26:$Vq},{19:[1,81],37:[1,82]},o($Vt,[2,35]),o($V1,[2,6]),{8:89,27:83,38:84,39:$Vu,41:$Vv,42:$Vw,43:$Vx,64:$V2},{16:[1,90]},{16:[2,57],63:$Vy},{59:[1,92]},{16:[2,59],63:$Vz},{8:95,60:94,61:$Vs,64:$V2},{16:[1,96]},{16:[1,97]},{16:[1,98]},o($V1,[2,5]),o($V5,[2,8]),{8:99,64:$V2},{16:[1,100],37:[1,101]},o($VA,[2,28]),{40:[1,102]},{40:[1,103]},o($VA,[2,31]),o($VA,[2,32]),o($VA,[2,33]),o($V5,[2,19]),{8:104,64:$V2},{8:105,64:$V2},{8:106,64:$V2},{8:107,63:$Vz,64:$V2},{8:108,63:$Vy,64:$V2},o($V5,[2,20]),{8:111,34:109,36:110,64:$V2},{8:111,34:112,36:110,64:$V2},o($Vt,[2,34]),{8:24,24:113,33:18,44:19,46:20,47:23,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve,64:$V2},{8:89,38:114,39:$Vu,41:$Vv,42:$Vw,43:$Vx,64:$V2},{8:115,64:$V2},{8:116,64:$V2},o($VB,[2,63]),{59:[1,117]},o($VB,[2,61]),{62:[1,118]},{62:[1,119]},{8:111,23:[2,21],36:120,64:$V2},o($VC,[2,24]),o($VC,[2,26],{10:[1,121]}),{8:111,23:[2,22],36:120,64:$V2},{23:[1,122]},o($VA,[2,27]),o($VA,[2,29]),o($VA,[2,30]),{16:[2,58]},o($VB,[2,60]),o($VB,[2,62]),o($VC,[2,23]),{15:[1,123]},o($V5,[2,17]),{8:24,33:124,44:19,46:20,47:23,48:$V6,49:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve,64:$V2},{16:[1,125]},{8:126,64:$V2},o($VC,[2,25])],
defaultActions: {117:[2,58]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function Statements() {
	this.statements = new Array();
}
function InheriteDeclaration() {
	//this.name
	//this.protocols
}
function ClassDeclaration() {
	//this.name
	//this.block
	//this.properties
}
function BlockDeclaration() {
	//this.variables
}
function DecoratorDeclaration(){
	//this.name
	//this.getter
	//this.setter
}
function PropertyDeclaration(){
	//this.variable
	//this.decorators
}
function FunctionDeclaration() {
	//this.name
}
function FunctionParameter() {
	//this.name
}
function DatabaseDeclaration(){
	
}
function TableDeclaration(){
	
}
function VarDeclaration() {
	//this.type
	//this.name
}
function TypeDeclaration() {
	//this.name
	//this.is_ptr
	//this.is_const;
	//this.pointers
}
function PointerDeclaration(){
	//this.is_const;
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comment */
break;
case 1:/* skip comment */
break;
case 2:/* skip whitespace */
break;
case 3:return 6;
break;
case 4:return 7;
break;
case 5:return 13;
break;
case 6:return 48;
break;
case 7:return 26;
break;
case 8:return 39;
break;
case 9:return 41;
break;
case 10:return 49;
break;
case 11:return 50;
break;
case 12:return 51;
break;
case 13:return 52;
break;
case 14:return 56;
break;
case 15:return 53;
break;
case 16:return 55;
break;
case 17:return 54;
break;
case 18:return 29;
break;
case 19:return 31;
break;
case 20:return 42;
break;
case 21:return 43;
break;
case 22:return 64; /*不能以数字作为变量的开头*/
break;
case 23:return 66;
break;
case 24:return 32;
break;
case 25:return 35;
break;
case 26:return 40;
break;
case 27:return 19;
break;
case 28:return 17;
break;
case 29:return 20;
break;
case 30:return 21;
break;
case 31:return 61;
break;
case 32:return 62;
break;
case 33:return 15;
break;
case 34:return 16;
break;
case 35:return 37;
break;
case 36:return 10;
break;
case 37:return 23;
break;
case 38:return 63;
break;
case 39:return 59;
break;
case 40:/**/
break;
}
},
rules: [/^(?:\/\*([*]*(([^*/])+([/])*)*)*\*\/)/,/^(?:\/\/.*\n)/,/^(?:[ \t\r\n])/,/^(?:@)/,/^(?:interface\b)/,/^(?:end\b)/,/^(?:enum\b)/,/^(?:property\b)/,/^(?:setter\b)/,/^(?:getter\b)/,/^(?:const\b)/,/^(?:signed\b)/,/^(?:unsigned\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:ORMDataBase\b)/,/^(?:ORMTable\b)/,/^(?:datafield\b)/,/^(?:primary\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:-)/,/^(?:\+)/,/^(?:=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\.)/,/^(?:")/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}